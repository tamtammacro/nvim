!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Lua	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Lua	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/skates/.config/nvim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
'<C-r>	lua/cmp/utils/keymap_spec.lua	/^      it('<C-r>=', function()$/;"	f
'isIncomplete	lua/cmp/source_spec.lua	/^    it('isIncomplete=true', function()$/;"	f
1.0.0	lua/vendor/lua-toml/CHANGELOG.md	/^# 1.0.0$/;"	c
1.0.1	lua/vendor/lua-toml/CHANGELOG.md	/^# 1.0.1$/;"	c
2.0.0	lua/vendor/lua-toml/CHANGELOG.md	/^# 2.0.0$/;"	c
2.0.1	lua/vendor/lua-toml/CHANGELOG.md	/^# 2.0.1$/;"	c
ALT	lua/keymaps.lua	/^local ALT = function(key)$/;"	f
ALT	lua/plugin_conf/which_key.lua	/^local ALT = function(key)$/;"	f
ALT_SHIFT	lua/keymaps.lua	/^local ALT_SHIFT = function(key)$/;"	f
ALT_SHIFT	lua/plugin_conf/which_key.lua	/^local ALT_SHIFT = function(key)$/;"	f
CONTROL	lua/keymaps.lua	/^local CONTROL = function(key)$/;"	f
CONTROL	lua/plugin_conf/which_key.lua	/^local CONTROL = function(key)$/;"	f
CONTROL_SHIFT	lua/keymaps.lua	/^local CONTROL_SHIFT = function(key)$/;"	f
CONTROL_SHIFT	lua/plugin_conf/which_key.lua	/^local CONTROL_SHIFT = function(key)$/;"	f
License	lua/vendor/lua-toml/README.md	/^# License$/;"	c
Usage	lua/vendor/lua-toml/README.md	/^# Usage$/;"	c
["<S-Tab>"]	lua/plugin_conf/cmp.lua	/^    ["<S-Tab>"] = cmp.mapping(function(fallback)$/;"	f
["<Tab>"]	lua/plugin_conf/cmp.lua	/^    ["<Tab>"] = cmp.mapping(function(fallback)$/;"	f
_	lua/cmp/utils/char.lua	/^_ = string.gsub(' \\t\\n', '.', function(char)$/;"	f
_	lua/cmp/utils/char.lua	/^_ = string.gsub('1234567890', '.', function(char)$/;"	f
_	lua/cmp/utils/char.lua	/^_ = string.gsub('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '.', function(char)$/;"	f
_	lua/cmp/utils/char.lua	/^_ = string.gsub('abcdefghijklmnopqrstuvwxyz', '.', function(char)$/;"	f
__call	lua/cmp/config/compare.lua	/^  __call = function(self, entry1, entry2)$/;"	f
__call	lua/cmp/config/mapping.lua	/^  __call = function(_, invoke, modes)$/;"	f
__call	lua/cmp/init.lua	/^  __call = function(self, c)$/;"	f
__call	lua/cmp/utils/async.lua	/^    __call = function(self, ...)$/;"	f
__call	lua/cmp/utils/feedkeys.lua	/^  __call = function(self, keys, mode, callback)$/;"	f
__call	lua/cmp/utils/keymap.lua	/^  __call = function(self, s)$/;"	f
__call	lua/cmp/utils/misc.lua	/^  __call = function(_, group)$/;"	f
__call	lua/cmp/utils/misc.lua	/^  __call = function(self, force)$/;"	f
__call	lua/cmp/view/custom_entries_view.lua	/^  __call = function(this, self, word)$/;"	f
__call	lua/cmp/vim_source.lua	/^  __call = function(self, callback)$/;"	f
__index	lua/keymaps.lua	/^setmetatable(keymaps,{__index = function(self,key)$/;"	f
__index	lua/plugin_settings.lua	/^setmetatable(plugin_settings,{__index = function(self,key)$/;"	f
__index	lua/preferences.lua	/^	__index = function(self, key)$/;"	f
_get_entries_view	lua/cmp/view.lua	/^view._get_entries_view = function(self)$/;"	f	unknown:view
_get_separator	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view._get_separator = function()$/;"	f	unknown:wildmenu_entries_view
_select	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view._select = function(self, cursor, option)$/;"	f	unknown:custom_entries_view
_select	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view._select = function(self, selected_index, option)$/;"	f	unknown:wildmenu_entries_view
abort	lua/cmp/config/mapping.lua	/^mapping.abort = function()$/;"	f	unknown:mapping
abort	lua/cmp/init.lua	/^cmp.abort = cmp.sync(function()$/;"	f	unknown:cmp
abort	lua/cmp/view.lua	/^view.abort = function(self)$/;"	f	unknown:view
abort	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.abort = function(self)$/;"	f	unknown:custom_entries_view
abort	lua/cmp/view/native_entries_view.lua	/^native_entries_view.abort = function(_)$/;"	f	unknown:native_entries_view
abort	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.abort = function(self)$/;"	f	unknown:wildmenu_entries_view
add	lua/cmp/utils/str.lua	/^  local add = function(c)$/;"	f
add_entry	lua/cmp/config/compare.lua	/^  add_entry = function(self, e)$/;"	f
autoindent	lua/cmp/core.lua	/^core.autoindent = function(self, trigger_event, callback)$/;"	f	unknown:core
backspace	lua/cmp/utils/keymap.lua	/^keymap.backspace = function(count)$/;"	f	unknown:keymap
backspace	lua/cmp/utils/spec.lua	/^    backspace = function()$/;"	f
before	lua/cmp/utils/spec.lua	/^spec.before = function()$/;"	f	unknown:spec
bool	lua/cmp/utils/misc.lua	/^misc.bool = function(v, def)$/;"	f	unknown:misc
bordered	lua/cmp/config/window.lua	/^window.bordered = function(opts)$/;"	f	unknown:window
bounds	lua/vendor/lua-toml/toml.lua	/^	local function bounds()$/;"	f
branch	lazy-lock.json	/^  "cmp-buffer": { "branch": "main", "commit": "3022dbc9166796b644a841a02de8dd1cc1d311fa" },$/;"	s	object:cmp-buffer
branch	lazy-lock.json	/^  "cmp-cmdline": { "branch": "main", "commit": "d250c63aa13ead745e3a40f61fdd3470efde3923" },$/;"	s	object:cmp-cmdline
branch	lazy-lock.json	/^  "cmp-nvim-lsp": { "branch": "main", "commit": "39e2eda76828d88b773cc27a3f61d2ad782c922d" },$/;"	s	object:cmp-nvim-lsp
branch	lazy-lock.json	/^  "cmp-nvim-lsp-signature-help": { "branch": "main", "commit": "031e6ba70b0ad5eee49fd2120ff7a2e3/;"	s	object:cmp-nvim-lsp-signature-help
branch	lazy-lock.json	/^  "cmp-path": { "branch": "main", "commit": "91ff86cd9c29299a64f968ebb45846c485725f23" },$/;"	s	object:cmp-path
branch	lazy-lock.json	/^  "lazy.nvim": { "branch": "main", "commit": "460e1cd8f24e364d54543a4b0e83f6f4ec1f65fb" },$/;"	s	object:lazy.nvim
branch	lazy-lock.json	/^  "lsp-zero.nvim": { "branch": "v1.x", "commit": "aa36afcf7a59fbd98008c9a434593c423d3d649a" },$/;"	s	object:lsp-zero.nvim
branch	lazy-lock.json	/^  "mason-lspconfig.nvim": { "branch": "main", "commit": "25c11854aa25558ee6c03432edfa0df0217324b/;"	s	object:mason-lspconfig.nvim
branch	lazy-lock.json	/^  "mason.nvim": { "branch": "main", "commit": "e2f7f9044ec30067bc11800a9e266664b88cda22" },$/;"	s	object:mason.nvim
branch	lazy-lock.json	/^  "neodev.nvim": { "branch": "main", "commit": "46aa467dca16cf3dfe27098042402066d2ae242d" },$/;"	s	object:neodev.nvim
branch	lazy-lock.json	/^  "nvim-autopairs": { "branch": "master", "commit": "ee297f215e95a60b01fde33275cc3c820eddeebe" }/;"	s	object:nvim-autopairs
branch	lazy-lock.json	/^  "nvim-cmp": { "branch": "main", "commit": "ae644feb7b67bf1ce4260c231d1d4300b19c6f30" },$/;"	s	object:nvim-cmp
branch	lazy-lock.json	/^  "nvim-lspconfig": { "branch": "master", "commit": "a9bc587e9ae0cbcb3e90a2e9342f86b3b78c4408" }$/;"	s	object:nvim-lspconfig
buf_cap_word	lua/helper/string_func.lua	/^function exports.buf_cap_word()$/;"	f	unknown:exports
buffer	lua/cmp/init.lua	/^  buffer = function(c)$/;"	f
buffer_not_empty	lua/plugin_conf/status_line.lua	/^            buffer_not_empty = function()$/;"	f
buffer_option	lua/cmp/utils/window.lua	/^window.buffer_option = function(self, key, value)$/;"	f	unknown:window
buttons	lua/plugin_conf/discord_presence.lua	/^	buttons = true, -- Configure Rich Presence button(s), either a boolean to enable\/disable, a st/;"	f
byteindex	lua/cmp/types/lsp.lua	/^    local ok, byteindex = pcall(function()$/;"	f
c	lua/cmp/config/mapping.lua	/^      c = function()$/;"	f
c	lua/cmp/config/mapping.lua	/^      c = function(fallback)$/;"	f
callback	lua/cmp/core.lua	/^    callback = (function(s_)$/;"	f
callback	lua/cmp/init.lua	/^  callback = callback or function() end$/;"	f
callback	lua/cmp/utils/async.lua	/^  callback = function()$/;"	f
callback	lua/cmp/utils/async.lua	/^  local callback = function(...)$/;"	f
callback	lua/cmp/utils/autocmd.lua	/^        callback = function()$/;"	f
callback	lua/cmp/utils/keymap_spec.lua	/^            callback = function()$/;"	f
callback	lua/cmp/utils/keymap_spec.lua	/^          callback = function()$/;"	f
callback	lua/cmp/view/native_entries_view.lua	/^  local callback = function()$/;"	f
callback	lua/plugin_conf/conform.lua	/^	callback = function(args)$/;"	f
callbacks[id]	lua/cmp/vim_source.lua	/^    self.callbacks[id] = function(...)$/;"	f	unknown:self
capitilize_word	lua/helper/utils/strings.lua	/^function strings.capitilize_word(str,can_uncap)$/;"	f	unknown:strings
captures_at_cursor	lua/cmp/config/context.lua	/^  local captures_at_cursor = vim.tbl_map(function(x)$/;"	f
changed	lua/cmp/context.lua	/^context.changed = function(self, ctx)$/;"	f	unknown:context
char	lua/vendor/lua-toml/toml.lua	/^	local function char(n)$/;"	f
check_backspace	lua/plugin_conf/cmp.lua	/^local check_backspace = function()$/;"	f
check_git_workspace	lua/plugin_conf/status_line.lua	/^            check_git_workspace = function()$/;"	f
clear	lua/cmp/utils/cache.lua	/^cache.clear = function(self)$/;"	f	unknown:cache
clear	lua/cmp/utils/event.lua	/^event.clear = function(self)$/;"	f	unknown:event
clone	lua/cmp/context.lua	/^context.clone = function(self)$/;"	f	unknown:context
close	lua/cmp/config/mapping.lua	/^mapping.close = function()$/;"	f	unknown:mapping
close	lua/cmp/init.lua	/^cmp.close = cmp.sync(function()$/;"	f	unknown:cmp
close	lua/cmp/utils/window.lua	/^window.close = function(self)$/;"	f	unknown:window
close	lua/cmp/view.lua	/^view.close = function(self)$/;"	f	unknown:view
close	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.close = function(self)$/;"	f	unknown:custom_entries_view
close	lua/cmp/view/docs_view.lua	/^docs_view.close = function(self)$/;"	f	unknown:docs_view
close	lua/cmp/view/native_entries_view.lua	/^native_entries_view.close = function(self)$/;"	f	unknown:native_entries_view
close	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.close = function(self)$/;"	f	unknown:wildmenu_entries_view
cmdline	lua/cmp/config/mapping.lua	/^mapping.preset.cmdline = function(override)$/;"	f	unknown:mapping.preset
cmdline	lua/cmp/init.lua	/^  cmdline = function(type, c)$/;"	f
cmp-buffer	lazy-lock.json	/^  "cmp-buffer": { "branch": "main", "commit": "3022dbc9166796b644a841a02de8dd1cc1d311fa" },$/;"	o
cmp-cmdline	lazy-lock.json	/^  "cmp-cmdline": { "branch": "main", "commit": "d250c63aa13ead745e3a40f61fdd3470efde3923" },$/;"	o
cmp-nvim-lsp	lazy-lock.json	/^  "cmp-nvim-lsp": { "branch": "main", "commit": "39e2eda76828d88b773cc27a3f61d2ad782c922d" },$/;"	o
cmp-nvim-lsp-signature-help	lazy-lock.json	/^  "cmp-nvim-lsp-signature-help": { "branch": "main", "commit": "031e6ba70b0ad5eee49fd2120ff7a2e3/;"	o
cmp-path	lazy-lock.json	/^  "cmp-path": { "branch": "main", "commit": "91ff86cd9c29299a64f968ebb45846c485725f23" },$/;"	o
codepoint_to_utf8	lua/helper/json.lua	/^local function codepoint_to_utf8(n)$/;"	f
color	lua/plugin_conf/status_line.lua	/^            color = function()$/;"	f
commit	lazy-lock.json	/^  "cmp-buffer": { "branch": "main", "commit": "3022dbc9166796b644a841a02de8dd1cc1d311fa" },$/;"	s	object:cmp-buffer
commit	lazy-lock.json	/^  "cmp-cmdline": { "branch": "main", "commit": "d250c63aa13ead745e3a40f61fdd3470efde3923" },$/;"	s	object:cmp-cmdline
commit	lazy-lock.json	/^  "cmp-nvim-lsp": { "branch": "main", "commit": "39e2eda76828d88b773cc27a3f61d2ad782c922d" },$/;"	s	object:cmp-nvim-lsp
commit	lazy-lock.json	/^  "cmp-nvim-lsp-signature-help": { "branch": "main", "commit": "031e6ba70b0ad5eee49fd2120ff7a2e3/;"	s	object:cmp-nvim-lsp-signature-help
commit	lazy-lock.json	/^  "cmp-path": { "branch": "main", "commit": "91ff86cd9c29299a64f968ebb45846c485725f23" },$/;"	s	object:cmp-path
commit	lazy-lock.json	/^  "lazy.nvim": { "branch": "main", "commit": "460e1cd8f24e364d54543a4b0e83f6f4ec1f65fb" },$/;"	s	object:lazy.nvim
commit	lazy-lock.json	/^  "lsp-zero.nvim": { "branch": "v1.x", "commit": "aa36afcf7a59fbd98008c9a434593c423d3d649a" },$/;"	s	object:lsp-zero.nvim
commit	lazy-lock.json	/^  "mason-lspconfig.nvim": { "branch": "main", "commit": "25c11854aa25558ee6c03432edfa0df0217324b/;"	s	object:mason-lspconfig.nvim
commit	lazy-lock.json	/^  "mason.nvim": { "branch": "main", "commit": "e2f7f9044ec30067bc11800a9e266664b88cda22" },$/;"	s	object:mason.nvim
commit	lazy-lock.json	/^  "neodev.nvim": { "branch": "main", "commit": "46aa467dca16cf3dfe27098042402066d2ae242d" },$/;"	s	object:neodev.nvim
commit	lazy-lock.json	/^  "nvim-autopairs": { "branch": "master", "commit": "ee297f215e95a60b01fde33275cc3c820eddeebe" }/;"	s	object:nvim-autopairs
commit	lazy-lock.json	/^  "nvim-cmp": { "branch": "main", "commit": "ae644feb7b67bf1ce4260c231d1d4300b19c6f30" },$/;"	s	object:nvim-cmp
commit	lazy-lock.json	/^  "nvim-lspconfig": { "branch": "master", "commit": "a9bc587e9ae0cbcb3e90a2e9342f86b3b78c4408" }$/;"	s	object:nvim-lspconfig
complete	lua/cmp/config/mapping.lua	/^mapping.complete = function(option)$/;"	f	unknown:mapping
complete	lua/cmp/core.lua	/^core.complete = function(self, ctx)$/;"	f	unknown:core
complete	lua/cmp/core_spec.lua	/^        complete = function(_, _, callback)$/;"	f
complete	lua/cmp/init.lua	/^cmp.complete = cmp.sync(function(option)$/;"	f	unknown:cmp
complete	lua/cmp/source.lua	/^source.complete = function(self, ctx, callback)$/;"	f	unknown:source
complete	lua/cmp/source_spec.lua	/^        complete = function(_, _, callback)$/;"	f
complete	lua/cmp/utils/spec.lua	/^    complete = function() end,$/;"	f
complete_common_string	lua/cmp/config/mapping.lua	/^mapping.complete_common_string = function()$/;"	f	unknown:mapping
complete_common_string	lua/cmp/core.lua	/^core.complete_common_string = function(self)$/;"	f	unknown:core
complete_common_string	lua/cmp/init.lua	/^cmp.complete_common_string = cmp.sync(function()$/;"	f	unknown:cmp
concat	lua/cmp/utils/misc.lua	/^misc.concat = function(list1, list2)$/;"	f	unknown:misc
config	lua/packer_plugins.lua	/^		config = function()$/;"	f
config	lua/plugin_collection/color_scheme_plugins.lua	/^        config = function()$/;"	f
config	lua/plugin_collection/functionality_plugins.lua	/^		config = function()$/;"	f
config	lua/plugin_collection/visual_plugins.lua	/^		config = function()$/;"	f
confirm	lua/cmp/config/mapping.lua	/^mapping.confirm = function(option)$/;"	f	unknown:mapping
confirm	lua/cmp/core.lua	/^core.confirm = function(self, e, option, callback)$/;"	f	unknown:core
confirm	lua/cmp/core_spec.lua	/^    local confirm = function(request, filter, completion_item, option)$/;"	f
confirm	lua/cmp/init.lua	/^cmp.confirm = cmp.sync(function(option, callback)$/;"	f	unknown:cmp
context	lua/cmp/utils/spec.lua	/^    context = function()$/;"	f
convert_position_encoding	lua/cmp/entry.lua	/^entry.convert_position_encoding = function(self, position)$/;"	f	unknown:entry
copy	lua/cmp/utils/misc.lua	/^misc.copy = function(tbl)$/;"	f	unknown:misc
create_fmd	lua/helper/fmeta.lua	/^function M.create_fmd(data)$/;"	f	unknown:M
create_set	lua/helper/json.lua	/^local function create_set(...)$/;"	f
dapui_config	lua/plugin_conf/dap.lua	/^dap.listeners.before.attach.dapui_config = function()$/;"	f	unknown:dap.listeners.before.attach
dapui_config	lua/plugin_conf/dap.lua	/^dap.listeners.before.event_exited.dapui_config = function()$/;"	f	unknown:dap.listeners.before.event_exited
dapui_config	lua/plugin_conf/dap.lua	/^dap.listeners.before.event_terminated.dapui_config = function()$/;"	f	unknown:dap.listeners.before.event_terminated
dapui_config	lua/plugin_conf/dap.lua	/^dap.listeners.before.launch.dapui_config = function()$/;"	f	unknown:dap.listeners.before.launch
debounce_next_tick	lua/cmp/utils/async.lua	/^async.debounce_next_tick = function(callback)$/;"	f	unknown:async
debug	lua/cmp/matcher.lua	/^matcher.debug = function(...)$/;"	f	unknown:matcher
debug	lua/cmp/matcher_spec.lua	/^    matcher.debug = function(...)$/;"	f	unknown:matcher
decode	lua/helper/json.lua	/^function json.decode(str)$/;"	f	unknown:json
decode_error	lua/helper/json.lua	/^local function decode_error(str, idx, msg)$/;"	f
dedup	lua/cmp/utils/async.lua	/^async.dedup = function()$/;"	f	unknown:async
deepcopy	lua/helper/func.lua	/^function exports.deepcopy(o, seen)$/;"	f	unknown:exports
delete	lua/cmp/utils/keymap.lua	/^keymap.delete = function(count)$/;"	f	unknown:keymap
deprecated	lua/cmp/utils/misc.lua	/^misc.deprecated = function(fn, msg)$/;"	f	unknown:misc
disable	lua/plugin_conf/treesitter.lua	/^        disable = function(lang, buf)$/;"	f
draw	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.draw = function(self)$/;"	f	unknown:custom_entries_view
draw	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.draw = function(self)$/;"	f	unknown:wildmenu_entries_view
editing_text	lua/plugin_conf/discord_presence.lua	/^	editing_text = "Editing %s", -- Format string rendered when an editable file is loaded in the b/;"	f
emit	lua/cmp/utils/autocmd.lua	/^autocmd.emit = function(event)$/;"	f	unknown:autocmd
emit	lua/cmp/utils/event.lua	/^event.emit = function(self, name, ...)$/;"	f	unknown:event
empty	lua/cmp/context.lua	/^context.empty = function()$/;"	f	unknown:context
empty	lua/cmp/utils/misc.lua	/^misc.empty = function(v)$/;"	f	unknown:misc
enabled	lua/cmp/config.lua	/^config.enabled = function()$/;"	f	unknown:config
enabled	lua/cmp/config/default.lua	/^    enabled = function()$/;"	f
encode	lua/helper/json.lua	/^encode = function(val, stack)$/;"	f
encode	lua/helper/json.lua	/^function json.encode(val)$/;"	f	unknown:json
encode	lua/vendor/lua-toml/toml.lua	/^TOML.encode = function(tbl)$/;"	f	unknown:TOML
encode_nil	lua/helper/json.lua	/^local function encode_nil(val)$/;"	f
encode_number	lua/helper/json.lua	/^local function encode_number(val)$/;"	f
encode_string	lua/helper/json.lua	/^local function encode_string(val)$/;"	f
encode_table	lua/helper/json.lua	/^local function encode_table(val, stack)$/;"	f
ensure	lua/cmp/utils/buffer.lua	/^buffer.ensure = function(name)$/;"	f	unknown:buffer
ensure	lua/cmp/utils/cache.lua	/^cache.ensure = function(self, key, callback)$/;"	f	unknown:cache
equals	lua/cmp/utils/keymap.lua	/^keymap.equals = function(a, b)$/;"	f	unknown:keymap
err	lua/core/load_plugins.lua	/^    local success, err = pcall(function()$/;"	f
err	lua/vendor/lua-toml/toml.lua	/^	local function err(message, strictOnly)$/;"	f
escape	lua/cmp/utils/str.lua	/^str.escape = function(text, chars)$/;"	f	unknown:str
escape_char	lua/helper/json.lua	/^local function escape_char(c)$/;"	f
escape_string	lua/helper/utils/strings.lua	/^local function escape_string(str)$/;"	f
exact	lua/cmp/config/compare.lua	/^compare.exact = function(entry1, entry2)$/;"	f	unknown:compare
execute	lua/cmp/entry.lua	/^entry.execute = function(self, callback)$/;"	f	unknown:entry
execute	lua/cmp/source.lua	/^source.execute = function(self, item, callback)$/;"	f	unknown:source
expand	lua/cmp/config/default.lua	/^      expand = function()$/;"	f
expand	lua/cmp/utils/spec.lua	/^      expand = function(args)$/;"	f
expand	lua/plugin_conf/cmp.lua	/^    expand = function(args)$/;"	f
f	lua/cmp/core.lua	/^  local f = function(s)$/;"	f
f	lua/cmp/utils/async_spec.lua	/^    local f = async.throttle(function()$/;"	f
fallback	lua/cmp/utils/keymap.lua	/^keymap.fallback = function(bufnr, mode, map)$/;"	f	unknown:keymap
file_exists	lua/helper/io_func.lua	/^function exports.file_exists(file)$/;"	f	unknown:exports
file_explorer_text	lua/plugin_conf/discord_presence.lua	/^	file_explorer_text = "Browsing %s", -- Format string rendered when browsing a file explorer (ei/;"	f
filetype	lua/cmp/init.lua	/^  filetype = function(filetype, c)$/;"	f
fill_defaults	lua/cmp/entry.lua	/^entry.fill_defaults = function(_, completion_item, defaults)$/;"	f	unknown:entry
filter	lua/cmp/core.lua	/^core.filter = async.throttle(function(self)$/;"	f	unknown:core
find_match_region	lua/cmp/matcher.lua	/^matcher.find_match_region = function(input, input_start_index, input_end_index, word, word_index/;"	f	unknown:matcher
format	lua/cmp/config/default.lua	/^      format = function(_, vim_item)$/;"	f
format	lua/plugin_conf/cmp.lua	/^    format = function(entry, vim_item)$/;"	f
func	lua/cmp/utils/binary_spec.lua	/^    local func = function(a, b)$/;"	f
fuzzy	lua/cmp/matcher.lua	/^matcher.fuzzy = function(input, word, matches)$/;"	f	unknown:matcher
get	lua/cmp/config.lua	/^config.get = function()$/;"	f	unknown:config
get	lua/cmp/utils/buffer.lua	/^buffer.get = function(name)$/;"	f	unknown:buffer
get	lua/cmp/utils/cache.lua	/^cache.get = function(self, key)$/;"	f	unknown:cache
getValue	lua/vendor/lua-toml/toml.lua	/^	function getValue()$/;"	f
get_active_entry	lua/cmp/init.lua	/^cmp.get_active_entry = cmp.sync(function()$/;"	f	unknown:cmp
get_active_entry	lua/cmp/view.lua	/^view.get_active_entry = function(self)$/;"	f	unknown:view
get_active_entry	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.get_active_entry = function(self)$/;"	f	unknown:custom_entries_view
get_active_entry	lua/cmp/view/native_entries_view.lua	/^native_entries_view.get_active_entry = function(self)$/;"	f	unknown:native_entries_view
get_active_entry	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.get_active_entry = function(self)$/;"	f	unknown:wildmenu_entries_view
get_border_info	lua/cmp/utils/window.lua	/^window.get_border_info = function(self)$/;"	f	unknown:window
get_buffer	lua/cmp/utils/window.lua	/^window.get_buffer = function(self)$/;"	f	unknown:window
get_char_at	lua/helper/utils/strings.lua	/^local function get_char_at(str,index)$/;"	f
get_char_left_of	lua/helper/utils/strings.lua	/^local function get_char_left_of(str,index)$/;"	f
get_char_right_of	lua/helper/utils/strings.lua	/^local function get_char_right_of(str,index)$/;"	f
get_commit_characters	lua/cmp/config/default.lua	/^      get_commit_characters = function(commit_characters)$/;"	f
get_commit_characters	lua/cmp/entry.lua	/^entry.get_commit_characters = function(self)$/;"	f	unknown:entry
get_common_string	lua/cmp/utils/str.lua	/^str.get_common_string = function(text1, text2)$/;"	f	unknown:str
get_completion_item	lua/cmp/entry.lua	/^entry.get_completion_item = function(self)$/;"	f	unknown:entry
get_config	lua/cmp/init.lua	/^cmp.get_config = function()$/;"	f	unknown:cmp
get_config_loc	lua/helper/io_func.lua	/^function exports.get_config_loc()$/;"	f	unknown:exports
get_content_height	lua/cmp/utils/window.lua	/^window.get_content_height = function(self)$/;"	f	unknown:window
get_context	lua/cmp/core.lua	/^core.get_context = function(self, option)$/;"	f	unknown:core
get_current_line	lua/cmp/utils/api.lua	/^api.get_current_line = function()$/;"	f	unknown:api
get_cursor	lua/cmp/utils/api.lua	/^api.get_cursor = function()$/;"	f	unknown:api
get_cursor_before_line	lua/cmp/utils/api.lua	/^api.get_cursor_before_line = function()$/;"	f	unknown:api
get_debug_name	lua/cmp/source.lua	/^source.get_debug_name = function(self)$/;"	f	unknown:source
get_default_insert_range	lua/cmp/source.lua	/^source.get_default_insert_range = function(self)$/;"	f	unknown:source
get_default_replace_range	lua/cmp/source.lua	/^source.get_default_replace_range = function(self)$/;"	f	unknown:source
get_documentation	lua/cmp/entry.lua	/^entry.get_documentation = function(self)$/;"	f	unknown:entry
get_entries	lua/cmp/init.lua	/^cmp.get_entries = cmp.sync(function()$/;"	f	unknown:cmp
get_entries	lua/cmp/source.lua	/^source.get_entries = function(self, ctx)$/;"	f	unknown:source
get_entries	lua/cmp/view.lua	/^view.get_entries = function(self)$/;"	f	unknown:view
get_entries	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.get_entries = function(self)$/;"	f	unknown:custom_entries_view
get_entries	lua/cmp/view/native_entries_view.lua	/^native_entries_view.get_entries = function(self)$/;"	f	unknown:native_entries_view
get_entries	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.get_entries = function(self)$/;"	f	unknown:wildmenu_entries_view
get_entry_filter	lua/cmp/source.lua	/^source.get_entry_filter = function(self)$/;"	f	unknown:source
get_fetching_time	lua/cmp/source.lua	/^source.get_fetching_time = function(self)$/;"	f	unknown:source
get_filter_text	lua/cmp/entry.lua	/^entry.get_filter_text = function(self)$/;"	f	unknown:entry
get_first_entry	lua/cmp/view.lua	/^view.get_first_entry = function(self)$/;"	f	unknown:view
get_first_entry	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.get_first_entry = function(self)$/;"	f	unknown:custom_entries_view
get_first_entry	lua/cmp/view/native_entries_view.lua	/^native_entries_view.get_first_entry = function(self)$/;"	f	unknown:native_entries_view
get_first_entry	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.get_first_entry = function(self)$/;"	f	unknown:wildmenu_entries_view
get_insert_range	lua/cmp/entry.lua	/^entry.get_insert_range = function(self)$/;"	f	unknown:entry
get_insert_text	lua/cmp/entry.lua	/^entry.get_insert_text = function(self)$/;"	f	unknown:entry
get_keyword_length	lua/cmp/source.lua	/^source.get_keyword_length = function(self)$/;"	f	unknown:source
get_keyword_pattern	lua/cmp/source.lua	/^source.get_keyword_pattern = function(self)$/;"	f	unknown:source
get_kind	lua/cmp/entry.lua	/^entry.get_kind = function(self)$/;"	f	unknown:entry
get_map	lua/cmp/utils/keymap.lua	/^keymap.get_map = function(mode, lhs)$/;"	f	unknown:keymap
get_matching_config	lua/cmp/source.lua	/^source.get_matching_config = function()$/;"	f	unknown:source
get_mode	lua/cmp/utils/api.lua	/^api.get_mode = function()$/;"	f	unknown:api
get_next_semantic_index	lua/cmp/utils/char.lua	/^char.get_next_semantic_index = function(text, current_index)$/;"	f	unknown:char
get_offset	lua/cmp/context.lua	/^context.get_offset = function(self, keyword_pattern)$/;"	f	unknown:context
get_offset	lua/cmp/entry.lua	/^entry.get_offset = function(self)$/;"	f	unknown:entry
get_offset	lua/cmp/view.lua	/^view.get_offset = function(self)$/;"	f	unknown:view
get_offset	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.get_offset = function(self)$/;"	f	unknown:custom_entries_view
get_offset	lua/cmp/view/native_entries_view.lua	/^native_entries_view.get_offset = function(self)$/;"	f	unknown:native_entries_view
get_offset	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.get_offset = function(self)$/;"	f	unknown:wildmenu_entries_view
get_overwrite	lua/cmp/entry.lua	/^entry.get_overwrite = function(self)$/;"	f	unknown:entry
get_partial_word_by_index	lua/helper/utils/strings.lua	/^function strings.get_partial_word_by_index(str,index)$/;"	f	unknown:strings
get_position_encoding_kind	lua/cmp/core_spec.lua	/^        get_position_encoding_kind = function()$/;"	f
get_position_encoding_kind	lua/cmp/source.lua	/^source.get_position_encoding_kind = function(self)$/;"	f	unknown:source
get_reason	lua/cmp/context.lua	/^context.get_reason = function(self)$/;"	f	unknown:context
get_replace_range	lua/cmp/entry.lua	/^entry.get_replace_range = function(self)$/;"	f	unknown:entry
get_screen_cursor	lua/cmp/utils/api.lua	/^api.get_screen_cursor = function()$/;"	f	unknown:api
get_selected_entry	lua/cmp/init.lua	/^cmp.get_selected_entry = cmp.sync(function()$/;"	f	unknown:cmp
get_selected_entry	lua/cmp/view.lua	/^view.get_selected_entry = function(self)$/;"	f	unknown:view
get_selected_entry	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.get_selected_entry = function(self)$/;"	f	unknown:custom_entries_view
get_selected_entry	lua/cmp/view/native_entries_view.lua	/^native_entries_view.get_selected_entry = function(self)$/;"	f	unknown:native_entries_view
get_selected_entry	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.get_selected_entry = function(self)$/;"	f	unknown:wildmenu_entries_view
get_source_config	lua/cmp/config.lua	/^config.get_source_config = function(name)$/;"	f	unknown:config
get_source_config	lua/cmp/source.lua	/^source.get_source_config = function(self)$/;"	f	unknown:source
get_sources	lua/cmp/core.lua	/^core.get_sources = function(self, filter)$/;"	f	unknown:core
get_trigger_characters	lua/cmp/source.lua	/^source.get_trigger_characters = function(self)$/;"	f	unknown:source
get_view	lua/cmp/entry.lua	/^entry.get_view = function(self, suggest_offset, entries_buf)$/;"	f	unknown:entry
get_vim_item	lua/cmp/entry.lua	/^entry.get_vim_item = function(self, suggest_offset)$/;"	f	unknown:entry
get_word	lua/cmp/entry.lua	/^entry.get_word = function(self)$/;"	f	unknown:entry
get_word	lua/cmp/utils/str.lua	/^str.get_word = function(text, stop_char, min_length)$/;"	f	unknown:str
get_word_by_index	lua/helper/utils/strings.lua	/^function strings.get_word_by_index(str,index)$/;"	f	unknown:strings
git_commit_text	lua/plugin_conf/discord_presence.lua	/^	git_commit_text = "Committing changes", -- Format string rendered when committing changes in gi/;"	f
global	lua/cmp/init.lua	/^  global = function(c)$/;"	f
goto_config	lua/core/my_quick_actions.lua	/^function exports.goto_config()$/;"	f	unknown:exports
has_cursor_line_text_edit	lua/cmp/core.lua	/^        local has_cursor_line_text_edit = (function()$/;"	f
has_prefix	lua/cmp/utils/str.lua	/^str.has_prefix = function(text, prefix)$/;"	f	unknown:str
hide	lua/cmp/view/ghost_text_view.lua	/^ghost_text_view.hide = function(self)$/;"	f	unknown:ghost_text_view
hide_in_width	lua/plugin_conf/status_line.lua	/^            hide_in_width = function()$/;"	f
in_syntax_group	lua/cmp/config/context.lua	/^context.in_syntax_group = function(group)$/;"	f	unknown:context
in_treesitter_capture	lua/cmp/config/context.lua	/^context.in_treesitter_capture = function(capture)$/;"	f	unknown:context
indentkeys	lua/cmp/utils/keymap.lua	/^keymap.indentkeys = function(expr)$/;"	f	unknown:keymap
info	lua/cmp/utils/window.lua	/^window.info = function(self)$/;"	f	unknown:window
info	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.info = function(self)$/;"	f	unknown:custom_entries_view
info	lua/cmp/view/native_entries_view.lua	/^native_entries_view.info = function(self)$/;"	f	unknown:native_entries_view
info	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.info = function(self)$/;"	f	unknown:wildmenu_entries_view
inherit	lua/cmp/utils/highlight.lua	/^highlight.inherit = function(name, source, settings)$/;"	f	unknown:highlight
init	lua/core/load_plugins.lua	/^    local function init()$/;"	f
init	lua/core/load_plugins.lua	/^function exports.init(plugin_manager)$/;"	f	unknown:exports
init	lua/plugin_collection/functionality_plugins.lua	/^		init = function()$/;"	f
init_plugins	lua/core/load_plugins.lua	/^local function init_plugins()$/;"	f
input	lua/cmp/utils/spec.lua	/^    input = function(char)$/;"	f
ins_left	lua/plugin_conf/status_line.lua	/^        local function ins_left(component)$/;"	f
ins_right	lua/plugin_conf/status_line.lua	/^        local function ins_right(component)$/;"	f
insert	lua/cmp/config/mapping.lua	/^mapping.preset.insert = function(override)$/;"	f	unknown:mapping.preset
insort	lua/cmp/utils/binary.lua	/^binary.insort = function(list, item, func)$/;"	f	unknown:binary
is_alnum	lua/cmp/utils/char.lua	/^char.is_alnum = function(byte)$/;"	f	unknown:char
is_alpha	lua/cmp/utils/char.lua	/^char.is_alpha = function(byte)$/;"	f	unknown:char
is_always_hidden	lua/plugin_conf/oil.lua	/^        is_always_hidden = function(name, bufnr)$/;"	f
is_available	lua/cmp/source.lua	/^source.is_available = function(self)$/;"	f	unknown:source
is_cmdline_mode	lua/cmp/utils/api.lua	/^api.is_cmdline_mode = function()$/;"	f	unknown:api
is_deprecated	lua/cmp/entry.lua	/^entry.is_deprecated = function(self)$/;"	f	unknown:entry
is_digit	lua/cmp/utils/char.lua	/^char.is_digit = function(byte)$/;"	f	unknown:char
is_direction_top_down	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.is_direction_top_down = function(self)$/;"	f	unknown:custom_entries_view
is_entire_word	lua/helper/utils/strings.lua	/^local function is_entire_word(str,index)$/;"	f
is_hidden_file	lua/plugin_conf/oil.lua	/^        is_hidden_file = function(name, bufnr)$/;"	f
is_insert_mode	lua/cmp/utils/api.lua	/^api.is_insert_mode = function()$/;"	f	unknown:api
is_native_menu	lua/cmp/config.lua	/^config.is_native_menu = function()$/;"	f	unknown:config
is_printable	lua/cmp/utils/char.lua	/^char.is_printable = function(byte)$/;"	f	unknown:char
is_select_mode	lua/cmp/utils/api.lua	/^api.is_select_mode = function()$/;"	f	unknown:api
is_semantic_index	lua/cmp/utils/char.lua	/^char.is_semantic_index = function(text, index)$/;"	f	unknown:char
is_suitable_mode	lua/cmp/utils/api.lua	/^api.is_suitable_mode = function()$/;"	f	unknown:api
is_symbol	lua/cmp/utils/char.lua	/^char.is_symbol = function(byte)$/;"	f	unknown:char
is_upper	lua/cmp/utils/char.lua	/^char.is_upper = function(byte)$/;"	f	unknown:char
is_visual_mode	lua/cmp/utils/api.lua	/^api.is_visual_mode = function()$/;"	f	unknown:api
is_white	lua/cmp/utils/char.lua	/^char.is_white = function(byte)$/;"	f	unknown:char
is_win32	lua/helper/io_func.lua	/^function exports.is_win32()$/;"	f	unknown:exports
isdir	lua/helper/io_func.lua	/^function exports.isdir(path)$/;"	f	unknown:exports
key	lua/cmp/utils/cache.lua	/^cache.key = function(_, key)$/;"	f	unknown:cache
kind	lua/cmp/config/compare.lua	/^compare.kind = function(entry1, entry2)$/;"	f	unknown:compare
lazy.nvim	lazy-lock.json	/^  "lazy.nvim": { "branch": "main", "commit": "460e1cd8f24e364d54543a4b0e83f6f4ec1f65fb" },$/;"	o
length	lua/cmp/config/compare.lua	/^compare.length = function(entry1, entry2)$/;"	f	unknown:compare
line_number_text	lua/plugin_conf/discord_presence.lua	/^	line_number_text = "Line %s out of %s", -- Format string rendered when `enable_line_number` is /;"	f
listen	lua/cmp/utils/keymap.lua	/^keymap.listen = function(mode, lhs, callback)$/;"	f	unknown:keymap
load_keymaps	lua/core/load_keymaps.lua	/^function module_export.load_keymaps(_, external_opts)$/;"	f	unknown:module_export
load_mod	lua/core/load_plugins.lua	/^    local function load_mod(data)$/;"	f
load_module	lua/core/load_keymaps.lua	/^    local function load_module(t)$/;"	f
locality_map	lua/cmp/config/compare.lua	/^      local locality_map = self.lines_cache:ensure({ 'line', buffer }, function()$/;"	f
log	lua/cmp/utils/debug.lua	/^debug.log = function(...)$/;"	f	unknown:debug
lsp-zero.nvim	lazy-lock.json	/^  "lsp-zero.nvim": { "branch": "v1.x", "commit": "aa36afcf7a59fbd98008c9a434593c423d3d649a" },$/;"	o
manual	lua/cmp/utils/spec.lua	/^    manual = function()$/;"	f
mason-lspconfig.nvim	lazy-lock.json	/^  "mason-lspconfig.nvim": { "branch": "main", "commit": "25c11854aa25558ee6c03432edfa0df0217324b/;"	o
mason.nvim	lazy-lock.json	/^  "mason.nvim": { "branch": "main", "commit": "e2f7f9044ec30067bc11800a9e266664b88cda22" },$/;"	o
match	lua/cmp/entry.lua	/^entry.match = function(self, input, matching_config)$/;"	f	unknown:entry
match	lua/cmp/matcher.lua	/^matcher.match = function(input, word, option)$/;"	f	unknown:matcher
match	lua/cmp/utils/char.lua	/^char.match = function(byte1, byte2)$/;"	f	unknown:char
matchstr	lua/cmp/utils/pattern.lua	/^pattern.matchstr = function(p, text)$/;"	f	unknown:pattern
merge	lua/cmp/utils/misc.lua	/^misc.merge = function(v1, v2)$/;"	f	unknown:misc
merge_keymaps	lua/cmp/config/mapping.lua	/^local function merge_keymaps(base, override)$/;"	f
mkdir	lua/helper/io_func.lua	/^function exports.mkdir(dirname)$/;"	f	unknown:exports
neodev.nvim	lazy-lock.json	/^  "neodev.nvim": { "branch": "main", "commit": "46aa467dca16cf3dfe27098042402066d2ae242d" },$/;"	o
new	lua/cmp/context.lua	/^context.new = function(prev_context, option)$/;"	f	unknown:context
new	lua/cmp/core.lua	/^core.new = function()$/;"	f	unknown:core
new	lua/cmp/entry.lua	/^entry.new = function(ctx, source, completion_item, item_defaults)$/;"	f	unknown:entry
new	lua/cmp/source.lua	/^source.new = function(name, s)$/;"	f	unknown:source
new	lua/cmp/utils/cache.lua	/^cache.new = function()$/;"	f	unknown:cache
new	lua/cmp/utils/event.lua	/^event.new = function()$/;"	f	unknown:event
new	lua/cmp/utils/window.lua	/^window.new = function()$/;"	f	unknown:window
new	lua/cmp/view.lua	/^view.new = function()$/;"	f	unknown:view
new	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.new = function()$/;"	f	unknown:custom_entries_view
new	lua/cmp/view/docs_view.lua	/^docs_view.new = function()$/;"	f	unknown:docs_view
new	lua/cmp/view/ghost_text_view.lua	/^ghost_text_view.new = function()$/;"	f	unknown:ghost_text_view
new	lua/cmp/view/native_entries_view.lua	/^native_entries_view.new = function()$/;"	f	unknown:native_entries_view
new	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.new = function()$/;"	f	unknown:wildmenu_entries_view
new	lua/cmp/vim_source.lua	/^vim_source.new = function(bridge_id, methods)$/;"	f	unknown:vim_source
next	lua/cmp/utils/async.lua	/^  next = function(...)$/;"	f
next_char	lua/helper/json.lua	/^local function next_char(str, idx, set, negate)$/;"	f
normalize	lua/cmp/config.lua	/^config.normalize = function(c)$/;"	f	unknown:config
normalize	lua/cmp/utils/keymap.lua	/^keymap.normalize = function(keys)$/;"	f	unknown:keymap
nvim-autopairs	lazy-lock.json	/^  "nvim-autopairs": { "branch": "master", "commit": "ee297f215e95a60b01fde33275cc3c820eddeebe" }/;"	o
nvim-cmp	lazy-lock.json	/^  "nvim-cmp": { "branch": "main", "commit": "ae644feb7b67bf1ce4260c231d1d4300b19c6f30" },$/;"	o
nvim-config	README.md	/^# nvim-config$/;"	c
nvim-lspconfig	lazy-lock.json	/^  "nvim-lspconfig": { "branch": "master", "commit": "a9bc587e9ae0cbcb3e90a2e9342f86b3b78c4408" }$/;"	o
off	lua/cmp/utils/event.lua	/^event.off = function(self, name, callback)$/;"	f	unknown:event
offset	lua/cmp/config/compare.lua	/^compare.offset = function(entry1, entry2)$/;"	f	unknown:compare
offset	lua/cmp/utils/pattern.lua	/^pattern.offset = function(p, text)$/;"	f	unknown:pattern
on	lua/cmp/utils/event.lua	/^event.on = function(self, name, callback)$/;"	f	unknown:event
on_attach	lua/plugin_conf/lsp.lua	/^	local function on_attach(_, bufnr)$/;"	f
on_callback	lua/cmp/vim_source.lua	/^vim_source.on_callback = function(id, args)$/;"	f	unknown:vim_source
on_change	lua/cmp/core.lua	/^core.on_change = function(self, trigger_event)$/;"	f	unknown:core
on_change	lua/cmp/view.lua	/^view.on_change = function(self)$/;"	f	unknown:view
on_change	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.on_change = function(self)$/;"	f	unknown:custom_entries_view
on_change	lua/cmp/view/native_entries_view.lua	/^native_entries_view.on_change = function(self)$/;"	f	unknown:native_entries_view
on_change	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.on_change = function(self)$/;"	f	unknown:wildmenu_entries_view
on_entry_change	lua/cmp/view.lua	/^view.on_entry_change = async.throttle(function(self)$/;"	f	unknown:view
on_insert_enter	lua/cmp/init.lua	/^local on_insert_enter = function()$/;"	f
on_keymap	lua/cmp/core.lua	/^core.on_keymap = function(self, keys, fallback)$/;"	f	unknown:core
on_line	lua/cmp/view/ghost_text_view.lua	/^		on_line = function(_)$/;"	f
on_moved	lua/cmp/core.lua	/^core.on_moved = function(self)$/;"	f	unknown:core
on_text_changed	lua/cmp/init.lua	/^local on_text_changed = function()$/;"	f
on_win	lua/cmp/view/custom_entries_view.lua	/^    on_win = function(_, win, buf, top, bot)$/;"	f
on_win	lua/cmp/view/ghost_text_view.lua	/^		on_win = function(_, win)$/;"	f
on_win	lua/cmp/view/wildmenu_entries_view.lua	/^    on_win = function(_, win, buf, _, _)$/;"	f
once	lua/cmp/utils/misc.lua	/^misc.once = function(callback)$/;"	f	unknown:misc
oneline	lua/cmp/utils/str.lua	/^str.oneline = function(text)$/;"	f	unknown:str
open	lua/cmp/utils/window.lua	/^window.open = function(self, style)$/;"	f	unknown:window
open	lua/cmp/view.lua	/^view.open = function(self, ctx, sources)$/;"	f	unknown:view
open	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.open = function(self, offset, entries)$/;"	f	unknown:custom_entries_view
open	lua/cmp/view/docs_view.lua	/^docs_view.open = function(self, e, view)$/;"	f	unknown:docs_view
open	lua/cmp/view/native_entries_view.lua	/^native_entries_view.open = function(self, offset, entries)$/;"	f	unknown:native_entries_view
open	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.open = function(self, offset, entries)$/;"	f	unknown:wildmenu_entries_view
option	lua/cmp/utils/window.lua	/^window.option = function(self, key, value)$/;"	f	unknown:window
order	lua/cmp/config/compare.lua	/^compare.order = function(entry1, entry2)$/;"	f	unknown:compare
override	lua/plugin_conf/oil.lua	/^        override = function(conf)$/;"	f
parse	lua/helper/json.lua	/^parse = function(str, idx)$/;"	f
parse	lua/vendor/lua-toml/toml.lua	/^	local function parse(tbl)$/;"	f
parse	lua/vendor/lua-toml/toml.lua	/^TOML.parse = function(toml, options)$/;"	f	unknown:TOML
parseArray	lua/vendor/lua-toml/toml.lua	/^	function parseArray()$/;"	f
parseBoolean	lua/vendor/lua-toml/toml.lua	/^	local function parseBoolean()$/;"	f
parseInlineTable	lua/vendor/lua-toml/toml.lua	/^	local function parseInlineTable()$/;"	f
parseNumber	lua/vendor/lua-toml/toml.lua	/^	local function parseNumber()$/;"	f
parseString	lua/vendor/lua-toml/toml.lua	/^	local function parseString()$/;"	f
parse_array	lua/helper/json.lua	/^local function parse_array(str, i)$/;"	f
parse_literal	lua/helper/json.lua	/^local function parse_literal(str, i)$/;"	f
parse_number	lua/helper/json.lua	/^local function parse_number(str, i)$/;"	f
parse_object	lua/helper/json.lua	/^local function parse_object(str, i)$/;"	f
parse_string	lua/helper/json.lua	/^local function parse_string(str, i)$/;"	f
parse_unicode_escape	lua/helper/json.lua	/^local function parse_unicode_escape(s)$/;"	f
plugin_manager_text	lua/plugin_conf/discord_presence.lua	/^	plugin_manager_text = "Managing plugins", -- Format string rendered when managing plugins (eith/;"	f
preload["nvim-web-devicons"]	lua/plugin_collection/functionality_plugins.lua	/^			package.preload["nvim-web-devicons"] = function()$/;"	f	unknown:package
prepare	lua/cmp/core.lua	/^core.prepare = function(self)$/;"	f	unknown:core
preselect	lua/cmp/view/native_entries_view.lua	/^native_entries_view.preselect = function(self, index)$/;"	f	unknown:native_entries_view
processKey	lua/vendor/lua-toml/toml.lua	/^			local function processKey(isLast)$/;"	f
pythonPath	lua/plugin_conf/dap.lua	/^        pythonPath = function()$/;"	f
read_all_file	lua/helper/io_func.lua	/^function exports.read_all_file(path)$/;"	f	unknown:exports
read_file_lines	lua/helper/io_func.lua	/^function exports.read_file_lines(path)$/;"	f	unknown:exports
reading_text	lua/plugin_conf/discord_presence.lua	/^	reading_text = "Reading %s", -- Format string rendered when a read-only or unmodifiable file is/;"	f
ready	lua/cmp/view.lua	/^view.ready = function(self)$/;"	f	unknown:view
ready	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.ready = function()$/;"	f	unknown:custom_entries_view
ready	lua/cmp/view/native_entries_view.lua	/^native_entries_view.ready = function(_)$/;"	f	unknown:native_entries_view
ready	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.ready = function()$/;"	f	unknown:wildmenu_entries_view
regex	lua/cmp/utils/pattern.lua	/^pattern.regex = function(p)$/;"	f	unknown:pattern
register_source	lua/cmp/core.lua	/^core.register_source = function(self, s)$/;"	f	unknown:core
register_source	lua/cmp/init.lua	/^cmp.register_source = function(name, s)$/;"	f	unknown:cmp
remove_suffix	lua/cmp/utils/str.lua	/^str.remove_suffix = function(text, suffix)$/;"	f	unknown:str
rep	lua/cmp/utils/misc.lua	/^misc.rep = function(str_or_tbl, count)$/;"	f	unknown:misc
require_mod	lua/core/load_plugins.lua	/^    local function require_mod(filename)$/;"	f
require_sub_mods	lua/core/load_plugins.lua	/^    local function require_sub_mods(p_path)$/;"	f
reset	lua/cmp/core.lua	/^core.reset = function(self)$/;"	f	unknown:core
reset	lua/cmp/source.lua	/^source.reset = function(self)$/;"	f	unknown:source
resolve	lua/cmp/entry.lua	/^entry.resolve = function(self, callback)$/;"	f	unknown:entry
resolve	lua/cmp/source.lua	/^source.resolve = function(self, item, callback)$/;"	f	unknown:source
run	lua/packer_plugins.lua	/^			run = function()$/;"	f
run	lua/plugin_collection/tree_sitter_plugins.lua	/^        run = function()$/;"	f
run_fallback	lua/cmp/utils/keymap_spec.lua	/^    local run_fallback = function(keys, fallback)$/;"	f
safe	lua/cmp/utils/misc.lua	/^misc.safe = function(v)$/;"	f	unknown:misc
score	lua/cmp/config/compare.lua	/^compare.score = function(entry1, entry2)$/;"	f	unknown:compare
scroll	lua/cmp/view/docs_view.lua	/^docs_view.scroll = function(self, delta)$/;"	f	unknown:docs_view
scroll_docs	lua/cmp/config/mapping.lua	/^mapping.scroll_docs = function(delta)$/;"	f	unknown:mapping
scroll_docs	lua/cmp/init.lua	/^cmp.scroll_docs = cmp.sync(function(delta)$/;"	f	unknown:cmp
scroll_docs	lua/cmp/view.lua	/^view.scroll_docs = function(self, delta)$/;"	f	unknown:view
search	lua/cmp/utils/binary.lua	/^binary.search = function(list, item, func)$/;"	f	unknown:binary
select_next_item	lua/cmp/config/mapping.lua	/^mapping.select_next_item = function(option)$/;"	f	unknown:mapping
select_next_item	lua/cmp/init.lua	/^cmp.select_next_item = cmp.sync(function(option)$/;"	f	unknown:cmp
select_next_item	lua/cmp/view.lua	/^view.select_next_item = function(self, option)$/;"	f	unknown:view
select_next_item	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.select_next_item = function(self, option)$/;"	f	unknown:custom_entries_view
select_next_item	lua/cmp/view/native_entries_view.lua	/^native_entries_view.select_next_item = function(self, option)$/;"	f	unknown:native_entries_view
select_next_item	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.select_next_item = function(self, option)$/;"	f	unknown:wildmenu_entries_view
select_prev_item	lua/cmp/config/mapping.lua	/^mapping.select_prev_item = function(option)$/;"	f	unknown:mapping
select_prev_item	lua/cmp/init.lua	/^cmp.select_prev_item = cmp.sync(function(option)$/;"	f	unknown:cmp
select_prev_item	lua/cmp/view.lua	/^view.select_prev_item = function(self, option)$/;"	f	unknown:view
select_prev_item	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.select_prev_item = function(self, option)$/;"	f	unknown:custom_entries_view
select_prev_item	lua/cmp/view/native_entries_view.lua	/^native_entries_view.select_prev_item = function(self, option)$/;"	f	unknown:native_entries_view
select_prev_item	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.select_prev_item = function(self, option)$/;"	f	unknown:wildmenu_entries_view
self[method]	lua/cmp/vim_source.lua	/^    self[method] = (function(m)$/;"	f
set	lua/cmp/utils/cache.lua	/^cache.set = function(self, key, value)$/;"	f	unknown:cache
set	lua/cmp/utils/misc.lua	/^misc.set = function(t, keys, v)$/;"	f	unknown:misc
set_buffer	lua/cmp/config.lua	/^config.set_buffer = function(c, bufnr)$/;"	f	unknown:config
set_cmdline	lua/cmp/config.lua	/^config.set_cmdline = function(c, cmdtypes)$/;"	f	unknown:config
set_context	lua/cmp/core.lua	/^core.set_context = function(self, ctx)$/;"	f	unknown:core
set_filetype	lua/cmp/config.lua	/^config.set_filetype = function(c, filetypes)$/;"	f	unknown:config
set_global	lua/cmp/config.lua	/^config.set_global = function(c)$/;"	f	unknown:config
set_keymap	lua/core/load_keymaps.lua	/^local function set_keymap(obj, func, opts, args)$/;"	f
set_map	lua/cmp/utils/keymap.lua	/^keymap.set_map = function(bufnr, mode, lhs, rhs, opts)$/;"	f	unknown:keymap
set_onetime	lua/cmp/config.lua	/^config.set_onetime = function(c)$/;"	f	unknown:config
set_style	lua/cmp/utils/window.lua	/^window.set_style = function(self, style)$/;"	f	unknown:window
setup	lua/plugin_conf/lsp.lua	/^function M.setup()$/;"	f	unknown:M
setup_mod	lua/core/load_plugins.lua	/^    local function setup_mod(filename)$/;"	f
should_enable	lua/plugin_conf/illuminate.lua	/^    should_enable = function(bufnr) return true end,$/;"	f
show	lua/cmp/view/ghost_text_view.lua	/^ghost_text_view.show = function(self, e)$/;"	f	unknown:ghost_text_view
skipWhitespace	lua/vendor/lua-toml/toml.lua	/^	local function skipWhitespace()$/;"	f
solve	lua/cmp/utils/keymap.lua	/^keymap.solve = function(bufnr, mode, map)$/;"	f	unknown:keymap
sort_text	lua/cmp/config/compare.lua	/^compare.sort_text = function(entry1, entry2)$/;"	f	unknown:compare
source	lua/cmp/utils/spec.lua	/^    source = function()$/;"	f
split	lua/vendor/lua-toml/toml.lua	/^	local function split(str, delim)$/;"	f
state	lua/cmp/utils/spec.lua	/^spec.state = function(text, row, col)$/;"	f	unknown:spec
status	lua/cmp/init.lua	/^cmp.status = function()$/;"	f	unknown:cmp
step	lua/cmp/utils/async.lua	/^async.step = function(...)$/;"	f	unknown:async
step	lua/vendor/lua-toml/toml.lua	/^	local function step(n)$/;"	f
stop	lua/cmp/utils/async.lua	/^    stop = function()$/;"	f
subscribe	lua/cmp/utils/autocmd.lua	/^autocmd.subscribe = function(events, callback)$/;"	f	unknown:autocmd
suspend	lua/cmp/core.lua	/^core.suspend = function(self)$/;"	f	unknown:core
suspend	lua/cmp/init.lua	/^cmp.suspend = function()$/;"	f	unknown:cmp
sync	lua/cmp/init.lua	/^cmp.sync = function(callback)$/;"	f	unknown:cmp
sync	lua/cmp/utils/async.lua	/^    sync = function(self, timeout_)$/;"	f
sync	lua/cmp/utils/async.lua	/^async.sync = function(runner, timeout)$/;"	f	unknown:async
t	lua/cmp/utils/keymap.lua	/^keymap.t = function(keys)$/;"	f	unknown:keymap
table_to_json_string	lua/helper/utils/strings.lua	/^function strings.table_to_json_string(t, indent_level)$/;"	f	unknown:strings
target_entries	lua/cmp/source.lua	/^  local target_entries = (function()$/;"	f
text_gen	lua/cmp/view/ghost_text_view.lua	/^ghost_text_view.text_gen = function(self, line, cursor_col)$/;"	f	unknown:ghost_text_view
throttle	lua/cmp/utils/async.lua	/^async.throttle = function(fn, timeout)$/;"	f	unknown:async
timeout	lua/cmp/utils/async.lua	/^async.timeout = function(fn, timeout)$/;"	f	unknown:async
to_args	lua/cmp/vim_source.lua	/^vim_source.to_args = function(args)$/;"	f	unknown:vim_source
to_lsp	lua/cmp/types/lsp.lua	/^  to_lsp = function(buf, position)$/;"	f
to_lsp	lua/cmp/types/lsp.lua	/^  to_lsp = function(buf, range)$/;"	f
to_utf16	lua/cmp/types/lsp.lua	/^  to_utf16 = function(text, position, from_encoding)$/;"	f
to_utf32	lua/cmp/types/lsp.lua	/^  to_utf32 = function(text, position, from_encoding)$/;"	f
to_utf8	lua/cmp/types/lsp.lua	/^  to_utf8 = function(text, position, from_encoding)$/;"	f
to_utfindex	lua/cmp/utils/misc.lua	/^misc.to_utfindex = function(text, vimindex)$/;"	f	unknown:misc
to_vim	lua/cmp/types/lsp.lua	/^  to_vim = function(buf, position)$/;"	f
to_vim	lua/cmp/types/lsp.lua	/^  to_vim = function(buf, range)$/;"	f
to_vimindex	lua/cmp/utils/misc.lua	/^misc.to_vimindex = function(text, utfindex)$/;"	f	unknown:misc
toggle	lua/plugin_conf/toggleterm.lua	/^function exports.toggle()$/;"	f	unknown:exports
toml.lua	lua/vendor/lua-toml/README.md	/^# toml.lua$/;"	c
trim	lua/cmp/utils/str.lua	/^str.trim = function(text)$/;"	f	unknown:str
trim	lua/vendor/lua-toml/toml.lua	/^	local function trim(str)$/;"	f
undobreak	lua/cmp/utils/keymap.lua	/^keymap.undobreak = function()$/;"	f	unknown:keymap
undojoin	lua/cmp/utils/keymap.lua	/^keymap.undojoin = function()$/;"	f	unknown:keymap
unregister_source	lua/cmp/core.lua	/^core.unregister_source = function(self, source_id)$/;"	f	unknown:core
unregister_source	lua/cmp/init.lua	/^cmp.unregister_source = function(id)$/;"	f	unknown:cmp
update	lua/cmp/config/compare.lua	/^  update = function(self)$/;"	f
update	lua/cmp/utils/window.lua	/^window.update = function(self)$/;"	f	unknown:window
use_plugins	lua/core/load_plugins.lua	/^local function use_plugins(plugin_manager)$/;"	f
use_visuals	lua/core/load_plugins.lua	/^local function use_visuals()$/;"	f
utf	lua/vendor/lua-toml/toml.lua	/^					local function utf(char)$/;"	f
utf16index	lua/cmp/types/lsp.lua	/^      local ok, utf16index = pcall(function()$/;"	f
utf32index	lua/cmp/types/lsp.lua	/^      local ok, utf32index = pcall(function()$/;"	f
v	lua/cmp/utils/misc.lua	/^    local s, v = pcall(function()$/;"	f
visible	lua/cmp/init.lua	/^cmp.visible = cmp.sync(function()$/;"	f	unknown:cmp
visible	lua/cmp/utils/window.lua	/^window.visible = function(self)$/;"	f	unknown:window
visible	lua/cmp/view.lua	/^view.visible = function(self)$/;"	f	unknown:view
visible	lua/cmp/view/custom_entries_view.lua	/^custom_entries_view.visible = function(self)$/;"	f	unknown:custom_entries_view
visible	lua/cmp/view/docs_view.lua	/^docs_view.visible = function(self)$/;"	f	unknown:docs_view
visible	lua/cmp/view/native_entries_view.lua	/^native_entries_view.visible = function(_)$/;"	f	unknown:native_entries_view
visible	lua/cmp/view/wildmenu_entries_view.lua	/^wildmenu_entries_view.visible = function(self)$/;"	f	unknown:wildmenu_entries_view
workspace_text	lua/plugin_conf/discord_presence.lua	/^	workspace_text = "Working on %s", -- Format string rendered when in a git repository (either st/;"	f
write_config_file	lua/core/load_plugins.lua	/^local function write_config_file(data)$/;"	f
write_file	lua/helper/io_func.lua	/^function exports.write_file(path,content)$/;"	f	unknown:exports
~	lua/core/load_keymaps.lua	/^                    func(type(args) ~= "function" and args or args and args())$/;"	f
